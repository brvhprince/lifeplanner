generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

enum AccountType {
  cash
  card
  mobile
  bank
}

enum UserStatus {
  active
  inactive
  banned
  suspended
}

enum Status {
  active
  inactive
}

enum ContributionType {
  yearly
  monthly
  weekly
  daily
  hourly
  custom
}

enum GoalStatus {
  active
  paused
  cancelled
  completed
}

enum TransactionType {
  income
  expense
}

enum TransactionSatus {
  active
  reversed
}

enum SubscriptionStatus {
  active
  paused
  cancelled
}

enum DebtStatus {
  active
  cancelled
  paid
}

enum ResponsibilityStatus {
  active
  paused
  terminated
  completed
}

enum FuturePlansStatus {
  todo
  progress
  paused
  completed
  failed
  abandoned
}

enum EmployerType {
  individual
  company
}

enum EmploymentType {
  contract
  full_time
  part_time
}

enum EmployerPaymentType {
  salary
  wages
  compensations
}

enum EmployerPaymentDuration {
  yearly
  quartely
  monthly
  weekly
  hourly
  milestone
}

enum EmployerStatus {
  todo
  active
  paused
  terminated
  completed
}

enum EmployerContactType {
  email
  phone
  link
  address
  other
}

enum ProjectType {
  personal
  employer
}

enum ProjectStatus {
  todo
  active
  progress
  paused
  completed
  terminated
  abandoned
}

enum BrandingStatus {
  todo
  progress
  paused
  completed
  abandoned
}

enum LearningStatus {
  todo
  progress
  paused
  completed
  abandoned
}

enum CareerStatus {
  todo
  active
  paused
  abandoned
}

enum TransferStatus {
  active
  reversed
}

enum ProfileGender {
  male
  female
  intersex
  nonconforming
  other
}

enum InvestmentType {
  stocks
  bonds
  cash_equivalent
  others
}

enum InvestmentStatus {
  todo
  active
  paused
  cancelled
  completed
}

enum SavingsStatus {
  todo
  active
  paused
  cancelled
  completed
}

enum ReminderStatus {
  active
  paused
  completed
  cancelled
}

enum ReminderFrequency {
  never
  daily
  weekly
  monthly
  yearly
}

enum NotificationStatus {
  read
  unread
}

enum SchduleStatus {
  active
  paused
  completed
  cancelled
}

enum ScheduleFrequency {
  never
  daily
  weekly
  weekdays
  weekends
  fortnightly
  monthly
  every3months
  every6months
  yearly
  custom
}

enum ScheduleEndsOn {
  never
  date
}

model User {
  id                Int               @id @default(sequence())
  user_id           String            @unique
  first_name        String
  other_names       String
  email             String            @unique
  phone             String?
  accounts          Account[]
  goals             Goal[]
  transactions      Transaction[]
  profile           Profile           @relation(fields: [user_id], references: [user_id])
  status            UserStatus        @default(active)
  message           String?
  hash              String            @unique
  created_at        DateTime          @default(now())
  updated_at        DateTime          @default(now()) @updatedAt
  subscriptions     Subscription[]
  expenses          Expense[]
  income            Income[]
  notes             Note[]
  debt              Debt[]
  responsibilities  Responsibility[]
  future_plans      FuturePlan[]
  employers         Employer[]
  projects          Project[]
  branding          Branding[]
  memories          Memories[]
  learnings         Learning[]
  relationships     Relationship[]
  careers           Career[]
  account_transfers AccountTransfer[]
  investments       Investment[]
  savings           Savings[]
  reminders         Reminder[]
  reports           Report[]
  activities        Activity[]
  notifications     Notification[]
  wishlists         Wishlist[]
  schedules         Schedule[]
}

model Account {
  id            Int               @id @default(sequence())
  account_id    String            @unique
  user_id       String
  title         String
  description   String
  currency      String
  image_id      Int?
  files         String?
  type          AccountType
  primary       Boolean           @default(false)
  balance       Float
  user          User?             @relation(fields: [user_id], references: [user_id])
  metadata      Json?
  status        Status            @default(active)
  hash          String            @unique
  created_at    DateTime          @default(now())
  updated_at    DateTime          @default(now()) @updatedAt
  goal_savings  GoalSaving[]
  transactions  Transaction[]
  image         File?             @relation(fields: [image_id], references: [id])
  subscriptions Subscription[]
  expenses      Expense[]
  income        Income[]
  debt          Debt[]
  employers     Employer[]
  to_accounts   AccountTransfer[] @relation(name: "ToAccount")
  from_accounts AccountTransfer[] @relation(name: "FromAccount")
  investments   Investment[]
  savings       Savings[]
}

model Goal {
  id                Int              @id @default(sequence())
  goal_id           String           @unique
  user_id           String
  title             String
  description       String?
  amount            Float
  currency          String
  image_id          Int?
  files             String?
  contribution_type ContributionType
  custom_type       String?
  deadline          DateTime         @db.Date
  savings           GoalSaving[]
  metadata          Json?
  user              User?            @relation(fields: [user_id], references: [user_id])
  status            GoalStatus       @default(active)
  hash              String           @unique
  created_at        DateTime         @default(now())
  updated_at        DateTime         @default(now()) @updatedAt
  image             File?            @relation(fields: [image_id], references: [id])
}

model GoalSaving {
  id         Int      @id @default(sequence())
  user_id    String
  savings_id String   @unique
  goal_id    String
  amount     Float
  account_id String
  metadata   Json?
  account    Account? @relation(fields: [account_id], references: [account_id])
  goal       Goal?    @relation(fields: [goal_id], references: [goal_id])
  hash       String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model Transaction {
  id               Int              @id @default(sequence())
  transaction_id   String           @unique
  user_id          String
  transaction_type TransactionType
  amount           Float
  currency         String
  account_id       String
  status           TransactionSatus
  user             User?            @relation(fields: [user_id], references: [user_id])
  account          Account?         @relation(fields: [account_id], references: [account_id])
  metadata         Json?
  message          String?
  hash             String           @unique
  created_at       DateTime         @default(now())
  updated_at       DateTime         @default(now()) @updatedAt
  expenses         Expense[]
  income           Income[]
}

model TransactionCategory {
  id               Int             @id @default(sequence())
  user_id          String
  category_id      String          @unique
  transaction_type TransactionType
  title            String
  description      String?
  image_id         Int?
  metadata         Json?
  status           Status          @default(active)
  hash             String          @unique
  created_at       DateTime        @default(now())
  updated_at       DateTime        @default(now()) @updatedAt
  image            File?           @relation(fields: [image_id], references: [id])
  expenses         Expense[]
  income           Income[]
}

model Subscription {
  id              Int                @id @default(sequence())
  subscription_id String             @unique
  user_id         String
  title           String
  description     String?
  image_id        Int?
  renews          DateTime
  amount          Float
  account_id      String
  metadata        Json?
  status          SubscriptionStatus
  user            User?              @relation(fields: [user_id], references: [user_id])
  account         Account?           @relation(fields: [account_id], references: [account_id])
  message         String?
  hash            String             @unique
  created_at      DateTime           @default(now())
  updated_at      DateTime           @default(now()) @updatedAt
  image           File?              @relation(fields: [image_id], references: [id])
}

model Expense {
  id             Int                  @id @default(sequence())
  user_id        String
  expense_id     String               @unique
  category_id    String
  account_id     String
  title          String
  notes          String?
  amount         Float
  currency       String
  date           DateTime
  recurring      Boolean              @default(false)
  renews_at      DateTime?            @db.Date
  transaction_id String?
  files          String?
  metadata       Json?
  transaction    Transaction?         @relation(fields: [transaction_id], references: [transaction_id])
  category       TransactionCategory? @relation(fields: [category_id], references: [category_id])
  user           User?                @relation(fields: [user_id], references: [user_id])
  account        Account?             @relation(fields: [account_id], references: [account_id])
  status         TransactionSatus
  message        String?
  hash           String               @unique
  created_at     DateTime             @default(now())
  updated_at     DateTime             @default(now()) @updatedAt
}

model Income {
  id             Int                  @id @default(sequence())
  user_id        String
  income_id      String               @unique
  category_id    String
  account_id     String
  title          String
  notes          String?
  amount         Float
  currency       String
  date           DateTime
  recurring      Boolean              @default(false)
  renews_at      DateTime?            @db.Date
  transaction_id String?
  files          String?
  metadata       Json?
  transaction    Transaction?         @relation(fields: [transaction_id], references: [transaction_id])
  category       TransactionCategory? @relation(fields: [category_id], references: [category_id])
  user           User?                @relation(fields: [user_id], references: [user_id])
  account        Account?             @relation(fields: [account_id], references: [account_id])
  status         TransactionSatus
  message        String?
  hash           String               @unique
  created_at     DateTime             @default(now())
  updated_at     DateTime             @default(now()) @updatedAt
}

model Note {
  id         Int      @id @default(sequence())
  user_id    String
  note_id    String   @unique
  title      String
  contents   String
  image_id   Int?
  files      String?
  metadata   Json?
  user       User?    @relation(fields: [user_id], references: [user_id])
  image      File?    @relation(fields: [image_id], references: [id])
  hash       String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model Debt {
  id          Int        @id @default(sequence())
  user_id     String
  debt_id     String     @unique
  title       String
  description String?
  image_id    Int?
  amount      Float
  currency    String
  account_id  String?
  metadata    Json?
  files       String?
  due_date    DateTime?
  paid_date   DateTime?
  user        User?      @relation(fields: [user_id], references: [user_id])
  image       File?      @relation(fields: [image_id], references: [id])
  account     Account?   @relation(fields: [account_id], references: [account_id])
  status      DebtStatus
  hash        String     @unique
  created_at  DateTime   @default(now())
  updated_at  DateTime   @default(now()) @updatedAt
}

model Responsibility {
  id                Int                     @id @default(sequence())
  user_id           String
  responsibility_id String                  @unique
  category_id       String
  title             String
  description       String?
  image_id          Int?
  metadata          Json?
  status            ResponsibilityStatus    @default(active)
  user              User?                   @relation(fields: [user_id], references: [user_id])
  image             File?                   @relation(fields: [image_id], references: [id])
  category          ResponsibilityCategory? @relation(fields: [category_id], references: [category_id])
  message           String?
  hash              String                  @unique
  created_at        DateTime                @default(now())
  updated_at        DateTime                @default(now()) @updatedAt
}

model ResponsibilityCategory {
  id               Int              @id @default(sequence())
  user_id          String
  category_id      String           @unique
  title            String
  description      String?
  status           Status           @default(active)
  hash             String           @unique
  created_at       DateTime         @default(now())
  updated_at       DateTime         @default(now()) @updatedAt
  responsibilities Responsibility[]
}

model FuturePlan {
  id             Int               @id @default(sequence())
  user_id        String
  plan_id        String            @unique
  title          String
  description    String?
  image_id       Int?
  metadata       Json?
  files          String?
  expected_date  DateTime?
  fulfilled_date DateTime?
  status         FuturePlansStatus @default(todo)
  user           User?             @relation(fields: [user_id], references: [user_id])
  image          File?             @relation(fields: [image_id], references: [id])
  message        String?
  hash           String            @unique
  created_at     DateTime          @default(now())
  updated_at     DateTime          @default(now()) @updatedAt
}

model Employer {
  id               Int                     @id @default(sequence())
  user_id          String
  employer_id      String                  @unique
  name             String
  employer_type    EmployerType
  employment_type  EmploymentType
  payment_type     EmployerPaymentType
  payment_duration EmployerPaymentDuration
  account_id       String?
  address          String
  image_id         Int?
  metadata         Json?
  status           EmployerStatus          @default(todo)
  user             User?                   @relation(fields: [user_id], references: [user_id])
  image            File?                   @relation(fields: [image_id], references: [id])
  account          Account?                @relation(fields: [account_id], references: [account_id])
  contacts         EmployerContact[]
  message          String?
  hash             String                  @unique
  created_at       DateTime                @default(now())
  updated_at       DateTime                @default(now()) @updatedAt
}

model EmployerContact {
  id          Int                 @id @default(sequence())
  user_id     String
  contact_id  String              @unique
  employer_id String
  title       String
  type        EmployerContactType
  value       String
  description String?
  employer    Employer            @relation(fields: [employer_id], references: [employer_id])
  metadata    Json?
  status      Status              @default(active)
  hash        String              @unique
  created_at  DateTime            @default(now())
  updated_at  DateTime            @default(now()) @updatedAt
}

model Project {
  id             Int             @id @default(sequence())
  user_id        String
  project_id     String          @unique
  title          String
  description    String
  image_id       Int?
  project_type   ProjectType
  files          String?
  start_date     DateTime?
  due_date       DateTime?
  completed_date DateTime?
  budget         Float?
  income         Float?
  metadata       Json?
  user           User?           @relation(fields: [user_id], references: [user_id])
  image          File?           @relation(fields: [image_id], references: [id])
  updates        ProjectUpdate[]
  status         ProjectStatus   @default(todo)
  message        String?
  hash           String          @unique
  created_at     DateTime        @default(now())
  updated_at     DateTime        @default(now()) @updatedAt
}

model ProjectUpdate {
  id          Int      @id @default(sequence())
  user_id     String
  update_id   String   @unique
  project_id  String
  title       String
  description String?
  project     Project  @relation(fields: [project_id], references: [project_id])
  metadata    Json?
  files       String?
  hash        String   @unique
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now()) @updatedAt
}

model Branding {
  id             Int              @id @default(sequence())
  branding_id    String           @unique
  user_id        String
  title          String
  description    String?
  start_date     DateTime?
  due_date       DateTime?
  completed_date DateTime?
  image_id       Int?
  files          String?
  metadata       Json?
  user           User?            @relation(fields: [user_id], references: [user_id])
  image          File?            @relation(fields: [image_id], references: [id])
  updates        BrandingUpdate[]
  status         BrandingStatus   @default(todo)
  message        String?
  hash           String           @unique
  created_at     DateTime         @default(now())
  updated_at     DateTime         @default(now()) @updatedAt
}

model BrandingUpdate {
  id          Int      @id @default(sequence())
  user_id     String
  update_id   String   @unique
  branding_id String
  title       String
  description String?
  files       String?
  metadata    Json?
  branding    Branding @relation(fields: [branding_id], references: [branding_id])
  hash        String   @unique
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now()) @updatedAt
}

model Memories {
  id          Int      @id @default(sequence())
  user_id     String
  title       String
  description String?
  cover_id    Int?
  files       String?
  metadata    Json?
  user        User?    @relation(fields: [user_id], references: [user_id])
  cover       File?    @relation(fields: [cover_id], references: [id])
  hash        String   @unique
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now()) @updatedAt
}

model Learning {
  id              Int              @id @default(sequence())
  learning_id     String           @unique
  user_id         String
  title           String
  description     String?
  image_id        Int?
  files           String?
  metadata        Json?
  start_date      DateTime?
  due_date        DateTime?
  completed_date  DateTime?
  accomplishments Json?
  accomplished    Json?
  user            User?            @relation(fields: [user_id], references: [user_id])
  image           File?            @relation(fields: [image_id], references: [id])
  updates         LearningUpdate[]
  status          LearningStatus   @default(todo)
  message         String?
  hash            String           @unique
  created_at      DateTime         @default(now())
  updated_at      DateTime         @default(now()) @updatedAt
}

model LearningUpdate {
  id          Int      @id @default(sequence())
  user_id     String
  update_id   String   @unique
  learning_id String
  title       String
  description String?
  files       String?
  learning    Learning @relation(fields: [learning_id], references: [learning_id])
  metadata    Json?
  hash        String   @unique
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now()) @updatedAt
}

model Profile {
  id                 Int            @id @default(sequence())
  user_id            String         @unique
  avatar_id          Int?
  cover_id           Int?
  date_of_birth      DateTime?      @db.Date
  gender             ProfileGender?
  place_of_birth     String?
  other_gender       String?
  about              String?
  fun_facts          String?
  pin_code           Int?
  security_questions Json?
  cover              File?          @relation(fields: [cover_id], references: [id], name: "cover")
  avatar             File?          @relation(fields: [avatar_id], references: [id], name: "avatar")
  two_fa             Boolean        @default(false)
  two_fa_code        String?
  metadata           Json?
  hash               String         @unique
  created_at         DateTime       @default(now())
  updated_at         DateTime       @default(now()) @updatedAt
  user               User?
}

model Relationship {
  id              Int                   @id @default(sequence())
  relationship_id String                @unique
  category_id     String
  user_id         String
  title           String
  description     String?
  image_id        Int?
  files           String?
  user            User?                 @relation(fields: [user_id], references: [user_id])
  image           File?                 @relation(fields: [image_id], references: [id])
  category        RelationshipCategory? @relation(fields: [category_id], references: [category_id])
  entries         RelationshipEntry[]
  metadata        Json?
  hash            String                @unique
  created_at      DateTime              @default(now())
  updated_at      DateTime              @default(now()) @updatedAt
}

model RelationshipCategory {
  id            Int            @id @default(sequence())
  user_id       String
  category_id   String         @unique
  title         String
  image_id      Int?
  image         File?          @relation(fields: [image_id], references: [id])
  description   String?
  hash          String         @unique
  created_at    DateTime       @default(now())
  updated_at    DateTime       @default(now()) @updatedAt
  relationships Relationship[]
}

model RelationshipEntry {
  id              Int           @id @default(sequence())
  relationship_id String
  user_id         String
  entry_id        String        @unique
  title           String
  image           Int?
  tag             String?
  description     String?
  metadata        Json?
  hash            String        @unique
  created_at      DateTime      @default(now())
  updated_at      DateTime      @default(now()) @updatedAt
  relationship    Relationship? @relation(fields: [relationship_id], references: [relationship_id])
}

model RelationshipTag {
  id          Int      @id @default(sequence())
  user_id     String
  tag_id      String   @unique
  title       String
  image_id    Int?
  image       File?    @relation(fields: [image_id], references: [id])
  description String?
  hash        String   @unique
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now()) @updatedAt
}

model Career {
  id          Int            @id @default(sequence())
  career_id   String         @unique
  user_id     String
  title       String
  description String?
  image_id    Int?
  files       String?
  metadata    Json?
  user        User?          @relation(fields: [user_id], references: [user_id])
  image       File?          @relation(fields: [image_id], references: [id])
  updates     CareerUpdate[]
  status      CareerStatus   @default(todo)
  message     String?
  hash        String         @unique
  created_at  DateTime       @default(now())
  updated_at  DateTime       @default(now()) @updatedAt
}

model CareerUpdate {
  id          Int      @id @default(sequence())
  user_id     String
  update_id   String   @unique
  career_id   String
  title       String
  description String?
  files       String?
  metadata    Json?
  hash        String   @unique
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now()) @updatedAt
  career      Career?  @relation(fields: [career_id], references: [career_id])
}

model AccountTransfer {
  id           Int            @id @default(sequence())
  user_id      String
  transfer_id  String         @unique
  from_        String
  to_          String
  amount       Float
  currency     String
  title        String
  description  String?
  files        String?
  user         User?          @relation(fields: [user_id], references: [user_id])
  from_account Account?       @relation(fields: [from_], references: [account_id], name: "ToAccount")
  to_account   Account?       @relation(fields: [to_], references: [account_id], name: "FromAccount")
  status       TransferStatus @default(active)
  metadata     Json?
  hash         String         @unique
  created_at   DateTime       @default(now())
  updated_at   DateTime       @default(now()) @updatedAt
}

model Investment {
  id              Int              @id @default(sequence())
  investment_id   String           @unique
  user_id         String
  investment_type InvestmentType
  other_type      String?
  title           String
  description     String?
  image_id        Int?
  account_id      String
  amount          Float
  currency        String
  files           String?
  start_date      DateTime?        @db.Date
  status          InvestmentStatus
  user            User?            @relation(fields: [user_id], references: [user_id])
  image           File?            @relation(fields: [image_id], references: [id])
  account         Account?         @relation(fields: [account_id], references: [account_id])
  metadata        Json?
  message         String?
  hash            String           @unique
  created_at      DateTime         @default(now())
  updated_at      DateTime         @default(now()) @updatedAt
}

model Savings {
  id          Int           @id @default(sequence())
  savings_id  String        @unique
  user_id     String
  title       String
  description String?
  account_id  String?
  recurring   Boolean       @default(false)
  renews_at   DateTime      @db.Date
  amount      Float
  currency    String
  image_id    Int?
  files       String?
  start_date  DateTime?     @db.Date
  status      SavingsStatus
  user        User?         @relation(fields: [user_id], references: [user_id])
  image       File?         @relation(fields: [image_id], references: [id])
  account     Account?      @relation(fields: [account_id], references: [account_id])
  metadata    Json?
  message     String?
  hash        String        @unique
  created_at  DateTime      @default(now())
  updated_at  DateTime      @default(now()) @updatedAt
}

model Reminder {
  id            Int               @id @default(sequence())
  reminder_id   String            @unique
  user_id       String
  title         String
  description   String?
  amount        Float
  currency      String
  frequency     ReminderFrequency
  reminder_date DateTime          @db.Date
  reminder_time DateTime          @db.Time
  reminder_ends DateTime?         @db.Date
  image_id      Int?
  files         String?
  status        ReminderStatus    @default(active)
  user          User?             @relation(fields: [user_id], references: [user_id])
  image         File?             @relation(fields: [image_id], references: [id])
  metadata      Json?
  message       String?
  hash          String            @unique
  created_at    DateTime          @default(now())
  updated_at    DateTime          @default(now()) @updatedAt
}

model Report {
  id          Int      @id @default(sequence())
  report_id   String   @unique
  user_id     String
  title       String
  description String?
  path        String
  metadata    Json?
  user        User?    @relation(fields: [user_id], references: [user_id])
  hash        String   @unique
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now()) @updatedAt
}

model File {
  id                      Int                    @id @default(sequence())
  user_id                 String
  name                    String
  type                    String
  category                String
  size                    String
  path                    String
  metadata                Json?
  status                  Status                 @default(active)
  message                 String?
  hash                    String                 @unique
  created_at              DateTime               @default(now())
  updated_at              DateTime               @default(now()) @updatedAt
  accounts                Account[]
  goals                   Goal[]
  transaction_categories  TransactionCategory[]
  subscriptions           Subscription[]
  notes                   Note[]
  debt                    Debt[]
  responsibilities        Responsibility[]
  future_plans            FuturePlan[]
  employers               Employer[]
  projects                Project[]
  branding                Branding[]
  memories                Memories[]
  learnings               Learning[]
  relationships           Relationship[]
  relationship_categories RelationshipCategory[]
  profile_covers          Profile[]              @relation(name: "cover")
  profile_avatars         Profile[]              @relation(name: "avatar")
  relationship_tags       RelationshipTag[]
  careers                 Career[]
  investments             Investment[]
  savings                 Savings[]
  reminders               Reminder[]
  notifications           Notification[]
  schedules               Schedule[]
}

model Activity {
  id          Int      @id @default(sequence())
  activity_id String   @unique
  user_id     String
  title       String
  description String?
  metadata    Json?
  user        User?    @relation(fields: [user_id], references: [user_id])
  hash        String   @unique
  created_at  DateTime @default(now())
}

model Notification {
  id              Int                @id @default(sequence())
  user_id         String
  notification_id String             @unique
  title           String
  image_id        Int?
  files           String?
  description     String?
  metadata        Json?
  user            User?              @relation(fields: [user_id], references: [user_id])
  image           File?              @relation(fields: [image_id], references: [id])
  status          NotificationStatus @default(unread)
  hash            String             @unique
  created_at      DateTime           @default(now())
  updated_at      DateTime           @default(now()) @updatedAt
}

model Wishlist {
  id          Int      @id @default(sequence())
  wishlist_id String   @unique
  user_id     String
  title       String
  description String?
  amount      Float
  currency    String
  metadata    Json?
  user        User?    @relation(fields: [user_id], references: [user_id])
  hash        String   @unique
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now()) @updatedAt
}

model Schedule {
  id          Int            @id @default(sequence())
  schedule_id String         @unique
  user_id     String
  title       String
  description String?
  image_id    Int?
  files       String?
  metadata    Json?
  user        User?          @relation(fields: [user_id], references: [user_id])
  image       File?          @relation(fields: [image_id], references: [id])
  schedules   ScheduleItem[]
  message     String?
  hash        String         @unique
  created_at  DateTime       @default(now())
  updated_at  DateTime       @default(now()) @updatedAt
}

model ScheduleItem {
  id            Int               @id @default(sequence())
  item_id       String            @unique
  schedule_id   String
  user_id       String
  title         String
  description   String?
  frequency     ScheduleFrequency
  ends_on       ScheduleEndsOn    @default(never)
  reminder_date DateTime          @db.Date
  reminder_time DateTime          @db.Time
  reminder_ends DateTime?         @db.Date
  schedule      Schedule          @relation(fields: [schedule_id], references: [schedule_id])
  image         Int?
  files         String?
  status        SchduleStatus     @default(active)
  metadata      Json?
  message       String?
  hash          String            @unique
  created_at    DateTime          @default(now())
  updated_at    DateTime          @default(now()) @updatedAt
}
